package com.example.TelegramBot.service;

import com.example.TelegramBot.config.BotConfig;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Component
public class HoroscopeBot extends TelegramLongPollingBot {
    private final BotConfig config;
    private final HoroscopeService horoscopeService;
    private final TranslationService translationService;

    private final Map<Long, String> userLanguageMap = new HashMap<>();

    public HoroscopeBot(BotConfig config, HoroscopeService horoscopeService, TranslationService translationService) {
        this.config = config;
        this.horoscopeService = horoscopeService;
        this.translationService = translationService;
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getChat().getFirstName();

            if (!userLanguageMap.containsKey(chatId)) {
                handleLanguageSelection(chatId, messageText, userName);
            } else {
                handleUserCommands(chatId, messageText);
            }
        }
    }

    private void handleLanguageSelection(long chatId, String messageText, String userName) {
        switch (messageText) {
            case "/start":
                sendLanguageSelection(chatId);
                break;

            case "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
                userLanguageMap.put(chatId, "ru");
                sendWelcomeMessage(chatId, userName, "ru");
                break;

            case "üá¨üáß English":
                userLanguageMap.put(chatId, "en");
                sendWelcomeMessage(chatId, userName, "en");
                break;

            default:
                sendTextMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select a language:");
                sendLanguageSelection(chatId);
                break;
        }
    }

    private void sendLanguageSelection(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:");
        message.setReplyMarkup(getLanguageKeyboard());
        sendMessage(message);
    }

    private ReplyKeyboardMarkup getLanguageKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π");
        row.add("üá¨üáß English");

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void sendWelcomeMessage(long chatId, String userName, String language) {
        String welcomeText = language.equals("ru") ?
                String.format("–ü—Ä–∏–≤–µ—Ç, %s! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", userName) :
                String.format("Hello, %s! üëã Welcome to the Horoscope Bot!\n\nChoose your zodiac sign:", userName);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(welcomeText);
        message.setReplyMarkup(getZodiacKeyboard(language));
        sendMessage(message);
    }

    private void handleUserCommands(long chatId, String messageText) {
        String userLanguage = userLanguageMap.getOrDefault(chatId, "ru");

        switch (messageText) {
            case "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø":
                sendZodiacKeyboard(chatId, userLanguage);
                break;

            case "‚ôà –û–≤–µ–Ω":
            case "‚ôâ –¢–µ–ª–µ—Ü":
            case "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã":
            case "‚ôã –†–∞–∫":
            case "‚ôå –õ–µ–≤":
            case "‚ôç –î–µ–≤–∞":
            case "‚ôé –í–µ—Å—ã":
            case "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω":
            case "‚ôê –°—Ç—Ä–µ–ª–µ—Ü":
            case "‚ôë –ö–æ–∑–µ—Ä–æ–≥":
            case "‚ôí –í–æ–¥–æ–ª–µ–π":
            case "‚ôì –†—ã–±—ã":
            case "‚ôà Aries":
            case "‚ôâ Taurus":
            case "‚ôä Gemini":
            case "‚ôã Cancer":
            case "‚ôå Leo":
            case "‚ôç Virgo":
            case "‚ôé Libra":
            case "‚ôè Scorpio":
            case "‚ôê Sagittarius":
            case "‚ôë Capricorn":
            case "‚ôí Aquarius":
            case "‚ôì Pisces":
                sendHoroscope(chatId, messageText);
                break;

            default:
                sendTextMessage(chatId, userLanguage.equals("ru") ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚¨á" :
                        "Please choose one of the available options ‚¨á");
                break;
        }
    }

    private void sendZodiacKeyboard(long chatId, String language) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(language.equals("ru") ? "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:" : "Choose your zodiac sign:");
        message.setReplyMarkup(getZodiacKeyboard(language));
        sendMessage(message);
    }

    private ReplyKeyboardMarkup getZodiacKeyboard(String language) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        if ("en".equals(language)) {
            keyboard.add(createRow("‚ôà Aries", "‚ôâ Taurus", "‚ôä Gemini"));
            keyboard.add(createRow("‚ôã Cancer", "‚ôå Leo", "‚ôç Virgo"));
            keyboard.add(createRow("‚ôé Libra", "‚ôè Scorpio", "‚ôê Sagittarius"));
            keyboard.add(createRow("‚ôë Capricorn", "‚ôí Aquarius", "‚ôì Pisces"));
        } else {
            keyboard.add(createRow("‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã"));
            keyboard.add(createRow("‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞"));
            keyboard.add(createRow("‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü"));
            keyboard.add(createRow("‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã"));
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private KeyboardRow createRow(String... buttons) {
        KeyboardRow row = new KeyboardRow();
        row.addAll(Arrays.asList(buttons));
        return row;
    }

    private void sendHoroscope(long chatId, String zodiacSign) {
        String sign = getEnglishSign(zodiacSign);
        String horoscope = horoscopeService.getHoroscope(sign);

        String userLanguage = userLanguageMap.getOrDefault(chatId, "ru");
        String translatedHoroscope = translationService.translate(horoscope, userLanguage);

        sendTextMessage(chatId, "üîÆ " + translatedHoroscope);
    }

    private String getEnglishSign(String sign) {
        Map<String, String> zodiacMap = new HashMap<>();
        zodiacMap.put("‚ôà –û–≤–µ–Ω", "aries");
        zodiacMap.put("‚ôâ –¢–µ–ª–µ—Ü", "taurus");
        zodiacMap.put("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "gemini");
        zodiacMap.put("‚ôã –†–∞–∫", "cancer");
        zodiacMap.put("‚ôå –õ–µ–≤", "leo");
        zodiacMap.put("‚ôç –î–µ–≤–∞", "virgo");
        zodiacMap.put("‚ôé –í–µ—Å—ã", "libra");
        zodiacMap.put("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "scorpio");
        zodiacMap.put("‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "sagittarius");
        zodiacMap.put("‚ôë –ö–æ–∑–µ—Ä–æ–≥", "capricorn");
        zodiacMap.put("‚ôí –í–æ–¥–æ–ª–µ–π", "aquarius");
        zodiacMap.put("‚ôì –†—ã–±—ã", "pisces");

        return zodiacMap.getOrDefault(sign, sign);
    }

    private void sendTextMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        sendMessage(message);
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
