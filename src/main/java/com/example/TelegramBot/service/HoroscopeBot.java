package com.example.TelegramBot.service;

import com.example.TelegramBot.config.BotConfig;
import com.example.TelegramBot.entity.User;
import com.example.TelegramBot.repository.UserRepository;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.util.*;

@Component
public class HoroscopeBot extends TelegramLongPollingBot {
    private final BotConfig config;
    private final HoroscopeService horoscopeService;
    private final TranslationService translationService;
    private final UserService userService;
    private final UserRepository userRepository;

    public HoroscopeBot(BotConfig config, HoroscopeService horoscopeService, TranslationService translationService, UserService userService, UserRepository userRepository) {
        this.config = config;
        this.horoscopeService = horoscopeService;
        this.translationService = translationService;
        this.userService = userService;
        this.userRepository = userRepository;
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();
            String firstName = update.getMessage().getFrom().getFirstName();
            String lastName = update.getMessage().getFrom().getLastName();
            String username = update.getMessage().getFrom().getUserName();

            Optional<User> optionalUser = userRepository.findByChatId(chatId);
            if (optionalUser.isEmpty()) {
                userService.registerUser(chatId, firstName, lastName, username);
                sendLanguageSelection(chatId);
            } else {
                User user = optionalUser.get();
                handleUserInput(chatId, messageText, user);
            }
        }
    }

    private void handleUserInput(Long chatId, String messageText, User user) {
        if (user.getLanguage() == null) {
            handleLanguageSelection(chatId, messageText, user);
        } else if (user.getSubscribedSign() == null) {
            handleZodiacSelection(chatId, messageText, user);
        } else {
            handleMenuSelection(chatId, messageText, user);
        }
    }

    private void handleLanguageSelection(Long chatId, String messageText, User user) {
        if (messageText.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π") || messageText.equals("üá¨üáß English")) {
            String language = messageText.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π") ? "ru" : "en";
            userService.setLanguage(chatId, language);  // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ë–î

            System.out.println("Language selected: " + language);

            sendWelcomeMessage(chatId, language, user.getFirstName());
        } else {
            sendTextMessage(chatId, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.");
            sendLanguageSelection(chatId);
        }
    }


    private void handleZodiacSelection(Long chatId, String messageText, User user) {
        if (isZodiacSign(messageText)) {
            user.setSubscribedSign(messageText);
            userRepository.save(user);
            sendHoroscope(chatId, messageText, user.getLanguage());
            sendMenu(chatId, user.getLanguage());
        } else {
            sendZodiacKeyboard(chatId, user.getLanguage());
        }
    }

    private void handleMenuSelection(Long chatId, String messageText, User user) {
        switch (messageText) {
            case "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            case "üîÑ Change Subscription":
                sendZodiacKeyboard(chatId, user.getLanguage());
                user.setSubscribedSign(null);
                userRepository.save(user);

                if (user.getLanguage() == null) {
                    sendLanguageSelection(chatId);
                }
                break;

            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
            case "‚ùå Unsubscribe":
                user.setSubscribedSign(null);
                user.setLanguage(null);
                userRepository.save(user);
                sendTextMessage(chatId, "üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.");
                sendLanguageSelection(chatId);
                break;

            case "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
            case "üá¨üáß English":
                String language = messageText.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π") ? "ru" : "en";
                userService.setLanguage(chatId, language);
                sendTextMessage(chatId, language.equals("ru") ? "üá∑üá∫ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π." : "üá¨üáß Language changed to English.");
                break;

            default:
                sendHoroscope(chatId, user.getSubscribedSign(), user.getLanguage());
                sendMenu(chatId, user.getLanguage());
                break;
        }
    }


    private void sendMenu(Long chatId, String language) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(language.equals("ru")
                ? "üìå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                : "üìå You are subscribed to the daily horoscope!\nChoose an action:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(language.equals("ru") ? "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" : "üîÑ Change Subscription");
        row1.add(language.equals("ru") ? "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "‚ùå Unsubscribe");

        keyboard.add(row1);
        keyboardMarkup.setKeyboard(keyboard);

        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void sendLanguageSelection(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π");
        row.add("üá¨üáß English");

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);

        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void sendWelcomeMessage(Long chatId, String language, String firstName) {
        String text = language.equals("ru")
                ? "–ü—Ä–∏–≤–µ—Ç, " + firstName + "! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
                : "Hello, " + firstName + "! Welcome! Choose your zodiac sign:";

        sendTextMessage(chatId, text);
        sendZodiacKeyboard(chatId, language);
    }

    public void sendHoroscope(long chatId, String zodiacSign, String language) {
        Optional<User> userOptional = userRepository.findByChatId(chatId);

        if (userOptional.isPresent()) {
            User user = userOptional.get();

            String userLanguage = user.getLanguage() != null ? user.getLanguage() : "ru";

            String sign = getEnglishSign(zodiacSign);
            String horoscope = horoscopeService.getHoroscope(sign);

            String translatedHoroscope = translationService.translate(horoscope, userLanguage);
            sendTextMessage(chatId, "üîÆ " + translatedHoroscope);
        }
    }

    private void sendZodiacKeyboard(Long chatId, String language) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(language.equals("ru")
                ? "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
                : "üîÆ Choose your zodiac sign:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(language.equals("ru") ? "‚ôà –û–≤–µ–Ω" : "‚ôà Aries");
        row1.add(language.equals("ru") ? "‚ôâ –¢–µ–ª–µ—Ü" : "‚ôâ Taurus");
        row1.add(language.equals("ru") ? "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã" : "‚ôä Gemini");
        row1.add(language.equals("ru") ? "‚ôã –†–∞–∫" : "‚ôã Cancer");

        KeyboardRow row2 = new KeyboardRow();
        row2.add(language.equals("ru") ? "‚ôå –õ–µ–≤" : "‚ôå Leo");
        row2.add(language.equals("ru") ? "‚ôç –î–µ–≤–∞" : "‚ôç Virgo");
        row2.add(language.equals("ru") ? "‚ôé –í–µ—Å—ã" : "‚ôé Libra");
        row2.add(language.equals("ru") ? "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω" : "‚ôè Scorpio");

        KeyboardRow row3 = new KeyboardRow();
        row3.add(language.equals("ru") ? "‚ôê –°—Ç—Ä–µ–ª–µ—Ü" : "‚ôê Sagittarius");
        row3.add(language.equals("ru") ? "‚ôë –ö–æ–∑–µ—Ä–æ–≥" : "‚ôë Capricorn");
        row3.add(language.equals("ru") ? "‚ôí –í–æ–¥–æ–ª–µ–π" : "‚ôí Aquarius");
        row3.add(language.equals("ru") ? "‚ôì –†—ã–±—ã" : "‚ôì Pisces");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private boolean isZodiacSign(String text) {
        return List.of(
                        "‚ôà –û–≤–µ–Ω", "‚ôà Aries",
                        "‚ôâ –¢–µ–ª–µ—Ü", "‚ôâ Taurus",
                        "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôä Gemini",
                        "‚ôã –†–∞–∫", "‚ôã Cancer",
                        "‚ôå –õ–µ–≤", "‚ôå Leo",
                        "‚ôç –î–µ–≤–∞", "‚ôç Virgo",
                        "‚ôé –í–µ—Å—ã", "‚ôé Libra",
                        "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôè Scorpio",
                        "‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "‚ôê Sagittarius",
                        "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôë Capricorn",
                        "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôí Aquarius",
                        "‚ôì –†—ã–±—ã", "‚ôì Pisces")
                .contains(text);
    }

    private String getEnglishSign(String sign) {
        Map<String, String> zodiacMap = new HashMap<>();
        zodiacMap.put("‚ôà –û–≤–µ–Ω", "aries");
        zodiacMap.put("‚ôâ –¢–µ–ª–µ—Ü", "taurus");
        zodiacMap.put("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "gemini");
        zodiacMap.put("‚ôã –†–∞–∫", "cancer");
        zodiacMap.put("‚ôå –õ–µ–≤", "leo");
        zodiacMap.put("‚ôç –î–µ–≤–∞", "virgo");
        zodiacMap.put("‚ôé –í–µ—Å—ã", "libra");
        zodiacMap.put("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "scorpio");
        zodiacMap.put("‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "sagittarius");
        zodiacMap.put("‚ôë –ö–æ–∑–µ—Ä–æ–≥", "capricorn");
        zodiacMap.put("‚ôí –í–æ–¥–æ–ª–µ–π", "aquarius");
        zodiacMap.put("‚ôì –†—ã–±—ã", "pisces");

        return zodiacMap.getOrDefault(sign, sign);
    }

    private void sendTextMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        sendMessage(message);
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
